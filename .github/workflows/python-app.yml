# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Process data

on:
  schedule:
  - cron: "0 2 10,25 * *"
  repository_dispatch:
  workflow_dispatch:
    inputs:
      url:
        description: 'Dataset repo'
        required: false
        default: ''
      dict:
        description: '词库文件文件名的关键字'
        required: false
        default: 'dict.txt'


permissions:
  contents: read

jobs:
  prepare:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        sudo apt-get -y install wget  p7zip-full
        python -m pip install --upgrade pip
        pip install flake8 pytest wget
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Build WikiFilter
      run: |
        echo $GITHUB_WORKSPACE
        pwd
        cd $GITHUB_WORKSPACE
        pwd
        cd WikiFilter
        g++ -o WikiFilter  WikiFilter.cpp
        chmod +x WikiFilter; ls -l
    - name: Calculate Version
      run: |
        # 获取当前日期
        current_date=$(date +%Y-%m-%d)
        
        # 解析出年月日
        current_year=$(date +%Y -d "$current_date")
        current_month=$(date +%m -d "$current_date")
        current_day=$(date +%d -d "$current_date")
        
        # 根据当前日期确定VERSION
        if [ $current_day -gt 20 ]; then
            VERSION="${current_year}${current_month}20"
        else
            VERSION="${current_year}${current_month}01"
        fi
        
        echo "VERSION=$VERSION" >> "$GITHUB_ENV"
        echo "版本号为: $VERSION"
        
    - name: Cache dump files
      id: cache-dump
      uses: actions/cache@v3
      env:
        cache-name: cache-dump
      with:
        path: |
          dict.txt
          *xml.bz2
        key: ${{ env.cache-name }}-${{ env.VERSION}}
        
    - name: Cache Text files
      id: cache-text-files
      uses: actions/cache@v3
      env:
        cache-name: cache-text-files
      with:
        path: |
          text/AA/*.txt
        key: ${{ env.cache-name }}-${{ env.VERSION}}

    - name: Check invalid file
      continue-on-error: true
      run: |
        ls ../scripts/one_line.py
        if [ ! -f "zhwiki-${VERSION}-pages-articles-multistream.xml.bz2" ]; then
          rm *xml.bz2
        else
          echo No invalid file
        fi
        if [ -f "text/AA/*.txt" ]; then
          echo "text_files_exist=true" >> "$GITHUB_ENV"
        fi

    - name: Download wiki dump
      continue-on-error: true
      run: |
        FILENAME=zhwiki-${VERSION}-all-titles-in-ns0
        if [ ! -f "dict.txt" ]; then
          echo download ${FILENAME}.gz
          wget -q https://dumps.wikimedia.org/zhwiki/${VERSION}/${FILENAME}.gz
          7z x ${FILENAME}.gz
          mv ${FILENAME} dict.txt
        else
          echo exist dict.txt
        fi
        
        if [ ! -f "zhwiki-${VERSION}-pages-articles-multistream.xml.bz2" ]; then
          echo download zhwiki-${VERSION}-pages-articles-multistream.xml.bz2
          wget -q https://dumps.wikimedia.org/zhwiki/${VERSION}/zhwiki-${VERSION}-pages-articles-multistream.xml.bz2
        else
          echo exist zhwiki-${VERSION}-pages-articles-multistream.xml.bz2
        fi
        
        if [[ "${text_files_exist}" != "true" ]]; then
          7z x zhwiki-${VERSION}-pages-articles-multistream.xml.bz2
        fi
        
        mv zhwiki-${VERSION}-pages-articles-multistream.xml zhwiki.xml
        ls -l
        
    - name:  Wikiextractor (gz to txt)
      # if: ${{ steps.cache-text-files.outputs.cache-hit != 'true' }}
      if: ${{ env.text_files_exist != 'true' }}
      run: |
        git clone https://github.com/tumuyan/wikiextractor
        python -m wikiextractor.wikiextractor.WikiExtractor -b 500M zhwiki.xml

    - name:  Extracted doc to one-line-article txt
      # if: ${{ steps.cache-text-files.outputs.cache-hit != 'true' }}
      if: ${{ env.text_files_exist != 'true' }}
      run: |
        python ../scripts/one_line.py text/AA 100
        ls -l text/AA
        
    - name: Store Artifact Count
      id: artifact_count
      run: echo "::set-output name=count::$(ls -1 text/AA/*.txt | wc -l)"

  filter:
    needs: prepare
    runs-on: ubuntu-latest
    
    # 根据上一个 job 构建的产物数量,动态生成并发任务
    strategy:
      matrix:
        artifact: [0, 1, 2, 3, 4]
        
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      
    - name: Download dataset
      if: ${{github.event.inputs.url}}
      run: |
        git clone ${{github.event.inputs.url}} --depth 0 text

    - name: Download dict
      continue-on-error: true
      run: |
        # 设置GitHub仓库URL和需要包含的字符串
        REPO_URL="https://api.github.com/repos/${{ steps.repo_info.outputs.REPOSITORY_NAME }}/${{ steps.repo_info.outputs.REPOSITORY_OWNER }}/releases/latest"
        
        # 获取最新发布版本的信息
        RELEASE_INFO=$(wget -qO- "$REPO_URL")
        
        # 从发布信息中提取词库文件下载链接
        DOWNLOAD_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name | contains("'"${{github.event.inputs.dict}}"'")) | .browser_download_url')
        
        # 下载文件到当前目录
        wget "$DOWNLOAD_URL" -P .
        ls


    - name: Run WikiFilter
      run: |
        pwd
        cd $GITHUB_WORKSPACE
        pwd
        cd WikiFilter
        ls -l
        ls  text/file${{ matrix.artifact }}.txt
        ./WikiFilter  text/AA/wiki_0${{ matrix.artifact }}
