# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Process data

on:
  schedule:
  - cron: "0 2 10,25 * *"
  repository_dispatch:
  workflow_dispatch:
    inputs:
      # url:
      #   description: 'Dataset repo'
      #   required: false
      #   default: ''
      dict_source:
        description: '选择需要处理的词库'
        required: true
        type: choice
        default: wiki
        options:
          - wiki
          - release
          - url
      dict_url:
        description: '词库文件下载路径'
        required: false
        default: ''
      dict:
        description: '词库文件名（关键字）'
        required: true
        default: 'dict.txt'
      dict_tag:
        description: '打包文件时的标签'
        required: false
        default: ''
      source_tag:
        description: '维基全文的版本'
        required: false
        default: ''

env:
  DICT_NAME: ${{ github.event.inputs.dict || 'dict.txt' }}

permissions:
  contents: read

jobs:
  prepare:

    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.date_version.outputs.VERSION }}
      CHECK-DICT: ${{ steps.check-dict.outputs.CHECK-DICT }}
    steps:
    - uses: actions/checkout@v4
    - name: Setup Java JDK
      uses: actions/setup-java@v4.2.1
      with:
        distribution: oracle
        java-version: '20'
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        sudo apt-get -y install wget  p7zip-full ripgrep 
        python -m pip install --upgrade pip
        pip install pytest
    - name: Get Date Version 1
      if:  github.event.inputs.source_tag == ''
      run: |
        # 获取当前日期
        current_date=$(date +%Y-%m-%d)
        
        # 解析出年月日
        current_year=$(date +%Y -d "$current_date")
        current_month=$(date +%m -d "$current_date")
        current_day=$(date +%d -d "$current_date")
        
        # 根据当前日期确定VERSION
        if [ $current_day -gt 21 ]; then
            VERSION="${current_year}${current_month}20"
        else
            VERSION="${current_year}${current_month}01"
        fi

        echo "VERSION=$VERSION" >> "$GITHUB_ENV"

    - name: Get Date Version 2
      if:  github.event.inputs.source_tag != ''
      run: |
        VERSION="${{github.event.inputs.source_tag}}"
        echo "VERSION=$VERSION" >> "$GITHUB_ENV"

    - name: Set Date Version
      id: date_version
      run: |
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "版本号为: $VERSION"
    
    - name: Cache dump files
      id: cache-dump
      uses: actions/cache@v4
      env:
        cache-name: cache-dump
      with:
        path: |
          *xml.bz2
        key: ${{ env.cache-name }}-${{ env.VERSION}}

    - name: Cache XML Doc files
      id: xml-doc-files
      uses: actions/cache@v4
      env:
        cache-name: xml-doc-files
      with:
        path: |
          extracted/zhwiki
        key: ${{ env.cache-name }}-${{ env.VERSION}}

    - name: Cache Text files
      id: cache-text-files
      uses: actions/cache@v4
      env:
        cache-name: cache-text-files
      with:
        path: |
          text/AA/*.txt
        key: ${{ env.cache-name }}-${{ env.VERSION}}

    - name: Check invalid file
      # continue-on-error: true
      run: |
        if [ -f "extracted/zhwiki" ]; then
          echo "extracted=true" >> "$GITHUB_ENV"
          echo "Pass: Cached extracted file"
        else
          echo "Fail: No cached text file"
        fi

        if [ ! -f "zhwiki-${VERSION}-pages-articles-multistream.xml.bz2" ]; then
          echo "Fail: Not exisit zhwiki-${VERSION}-pages-articles-multistream.xml.bz2"
          rm -f *xml.bz2
        else
          echo Pass: No invalid dump file
        fi

    - name: Download wiki dump
      if: ${{env.extracted != 'true'}}
      continue-on-error: true
      run: |
        if [ ! -f "zhwiki-${VERSION}-pages-articles-multistream.xml.bz2" ]; then
          echo download zhwiki-${VERSION}-pages-articles-multistream.xml.bz2 from https://dumps.wikimedia.org/zhwiki/${VERSION}/zhwiki-${VERSION}-pages-articles-multistream.xml.bz2
          # wget -q https://dumps.wikimedia.org/zhwiki/${VERSION}/zhwiki-${VERSION}-pages-articles-multistream.xml.bz2
          curl -o  "zhwiki-${VERSION}-pages-articles-multistream.xml.bz2" https://dumps.wikimedia.org/zhwiki/${VERSION}/zhwiki-${VERSION}-pages-articles-multistream.xml.bz2
        else
          echo exist zhwiki-${VERSION}-pages-articles-multistream.xml.bz2
        fi
        
        if [[ "${extracted}" != "true" ]]; then
          7z x zhwiki-${VERSION}-pages-articles-multistream.xml.bz2
        fi
        
        if  [ -f "zhwiki-${VERSION}-pages-articles-multistream.xml" ]; then
          mv zhwiki-${VERSION}-pages-articles-multistream.xml zhwiki.xml
        fi

        ls -l
        
    - name:  Wikiextractor (XML dump to Extracted doc)
      if: ${{ env.extracted != 'true' }}
      run: |
        git clone https://github.com/tumuyan/wikiextractor
        python -m wikiextractor.wikiextractor.WikiExtractor -b 50G zhwiki.xml
        mkdir -p extracted
        rm zhwiki.xml
        mv text/AA/wiki_00 ./extracted/zhwiki

    - name:  Extracted doc to one-line-article (.txt) & OpenCC (.opencc.txt)
      # 转为一篇文章为一行内容的txt以及opencc配置
      run: |
        python scripts/one_line.py extracted 100
        echo "extracted:"
        ls -lh extracted
        echo "scripts:"
        ls -lh scripts
    
    - name: Upload OpenCC Artifact
      uses: actions/upload-artifact@v4.3.3
      with:
        name: opencc
        path: |
          scripts/*.opencc.txt

    - name:  Split Text
      # 切分文件
      run: |
        rm -f text/AA/*
        python scripts/split_file.py extracted/zhwiki.txt text/AA/ 16
        ls -lh text/AA/*


    - name: Download dict (Dict url)
      continue-on-error: true
      if: github.event.inputs.dict_url != '' && github.event.inputs.dict_source=='url'
      run: |
        wget -O ${{github.event.inputs.dict}}  ${{github.event.inputs.dict_url}}
        ls

    - name: Download dict (Github Release) 
      continue-on-error: true
      if: github.event.inputs.dict_source=='release'
      run: |
        # 设置GitHub仓库URL和需要包含的字符串
        REPO_URL="https://api.github.com/repos/${{ github.repository }}/releases/latest"
        # 获取最新发布版本的信息
        RELEASE_INFO=$(wget -qO- "$REPO_URL")
        # 从发布信息中提取词库文件下载链接
        DOWNLOAD_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name | contains("'"${{github.event.inputs.dict}}"'")) | .browser_download_url')
        # 下载文件到当前目录
        wget  -O ${{github.event.inputs.dict}} "$DOWNLOAD_URL"
        ls

    - name: Download dict (Wiki Dump)
      continue-on-error: true
      if: github.event.inputs.dict_source=='wiki' || "${{github.event.inputs.dict_source}}"==""
      run: |
        FILENAME=zhwiki-${VERSION}-all-titles-in-ns0
        echo download ${FILENAME}.gz
        wget  https://dumps.wikimedia.org/zhwiki/${VERSION}/${FILENAME}.gz
        7z x ${FILENAME}.gz
        mv ${FILENAME}  ${{github.event.inputs.dict}} 
        ls


    - name: Download Dict-Tick
      uses: robinraju/release-downloader@v1.10
      with:
        repository: 'tumuyan/Dict-Trick'
        latest: true
        preRelease: false
        fileName: 'Clean.jar'
        tarBall: false
        zipBall: false
        out-file-path: ''
        extract: false

    - name: Check & Clean Dict
      id: check-dict
      continue-on-error: true
      run: |
        dict="${{ github.event.inputs.dict }}"
        if [ -f "${dict}" ]; then
          echo "check-dict=true" >> $GITHUB_OUTPUT
          java -jar Clean.jar  -i "${dict}" -c scripts/dict-tick-preprocess.txt
        else
          echo "check-dict=false" >> $GITHUB_OUTPUT
          echo "::warning:: not exist ${{github.event.inputs.dict}}"
        fi

        filename="${dict%.*}"
        echo "dict_filename=$filename" >> "$GITHUB_ENV"
        if [ -f "${filename}.dict.txt" ]; then
          echo "rename ${filename}.dict.txt & ${{github.event.inputs.dict}}"
          mv "${{github.event.inputs.dict}}" "${filename}.raw.txt"
          mv "${filename}.dict.txt"  "${{github.event.inputs.dict}}"
        else
          echo "::warning:: not exist ${filename}.dict.txt"
        fi

        echo "ls ${filename}:"
        ls ${filename}*

    - name: Upload Dict Artifact
      uses: actions/upload-artifact@v4.3.3
      with:
        name: dict
        path: |
          ${{github.event.inputs.dict}}

    - name: Upload Dict Pre-Process Artifact
      uses: actions/upload-artifact@v4.3.3
      with:
        name: dict-preprocess
        path: |
          ${{env.dict_filename}}* 

  filter:
    needs: prepare
    if: ${{ needs.prepare.outputs.check-dict == 'true' }}
    outputs:
      VERSION: ${{ steps.date_version.outputs.VERSION }}
    runs-on: ubuntu-latest
    
    # 并发任务
    strategy:
      matrix:
        artifact: ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15"]
      fail-fast: false
        
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set Env
      env:
        VERSION: ${{needs.prepare.outputs.VERSION}}
      run: |
        echo "VERSION=$VERSION" 
        echo "VERSION=$VERSION" >> "$GITHUB_ENV"
        echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

    - name: Download Dict artifacts
      uses: actions/download-artifact@v4
      with:
        # path:  scripts/*.opencc.txt
        name: dict

    - name: Cache Text files
      id: cache-text-files
      uses: actions/cache@v4
      env:
        cache-name: cache-text-files
      with:
        path: |
          text/AA/*.txt
        key: ${{ env.cache-name }}-${{ env.VERSION}}

    - name: Check File
      run: |
        if [ -f "text/AA/wiki_${{ matrix.artifact }}.txt" ]; then
          echo "EXISTS=true" >> "$GITHUB_ENV"
          ls -lh "text/AA/wiki_${{ matrix.artifact }}.txt"
        else
          echo "file not found, text/AA/wiki_${{ matrix.artifact }}.txt"
        fi

        if [ -f "${{github.event.inputs.dict}}" ]; then
          ls -lh "${{github.event.inputs.dict}}"
        else
          echo "dict not found, ${{github.event.inputs.dict}} "
          echo "EXISTS=false" >> "$GITHUB_ENV"
        fi

    - name: Install dependencies
      if: env.EXISTS=='true'
      run: |
        sudo apt-get -y install wget  p7zip-full opencc
        python -m pip install --upgrade pip
        pip install pytest


    # - name: Download dataset
    #   if: ${{github.event.inputs.url}}
    #   run: |
    #     git clone ${{github.event.inputs.url}} --depth 1 text



    # - name: Download artifacts
    #   uses: actions/download-artifact@v4
    #   with:
    #     name: build-artifacts
    #     path: text/AA/

    - name: Build WikiFilter
      env:
        VERSION: ${{needs.prepare.outputs.VERSION}}
      if: env.EXISTS=='true'
      run: |
        cd WikiFilter
        pwd
        ls
        g++ -o WikiFilter  WikiFilter.cpp
        chmod +x WikiFilter; ls -lh

    - name: Run WikiFilter
      if: env.EXISTS=='true'
      run: |
        ls -lh
        # mkdir -p --ignore-existing text/AA
        echo ls text/AA
        ls -lh text/AA/
        ./WikiFilter/WikiFilter ${{github.event.inputs.dict}}  text/AA/wiki_${{ matrix.artifact }}.txt

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.3.3
      if: env.EXISTS=='true'
      with:
        name: wiki_${{ matrix.artifact }}.csv
        path: text/AA/wiki_*.csv

    - name: for Skip
      if: env.EXISTS!='true'
      run: ls -lh ;echo ls text/AA; ls -lh text/AA

  merge:
    needs: filter
    runs-on: ubuntu-latest
    if: always()
        
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set Env
      env:
        VERSION: ${{needs.filter.outputs.VERSION}}
      run: |
        echo "VERSION=$VERSION" >> "$GITHUB_ENV"

    # - name: Download OpenCC artifacts
    #   uses: actions/download-artifact@v4
    #   with:
    #     path:  scripts/*.opencc.txt
    #     name: opencc

    - name: Install dependencies
      run: |
        sudo apt-get -y install wget  p7zip-full opencc
        python -m pip install --upgrade pip
        pip install pytest

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: text/AA/

    - name: Prepare Enviroment
      run: |
        ls
        source_dir="text/AA/"
        echo ls $source_dir
        ls $source_dir -l
        mv $source_dir/dict/* $source_dir
        mv $source_dir/opencc/*.opencc.txt scripts
        
        echo merge csv
        python scripts/merge_csv.py  text/AA merge 0 filted.csv

    - name: Upload Result
      uses: actions/upload-artifact@v4.3.3
      with:
        name: wiki_result_${{ env.VERSION}}_${{github.event.inputs.dict_source}}_1
        path: |
         text/AA/*.chs.*
         text/AA/*.merge.*
         text/AA/*.csv

    - name: OpenCC & Pass2
      run: |
        opencc -i text/AA/merge.csv -o text/AA/merge.chs.csv -c scripts/a2s2.json
        echo merge and filte
        python scripts/merge_csv.py  text/AA filted.chs 3 merge.chs.csv
        ls $source_dir -l

    - name: Upload Result
      uses: actions/upload-artifact@v4.3.3
      with:
        name: wiki_result_${{ env.VERSION}}_${{github.event.inputs.dict_source}}_all
        path: |
         text/AA/*.chs.*
         text/AA/*.merge.*
         text/AA/*.csv
         
    - name: Upload Simplified Chinese Result
      uses: actions/upload-artifact@v4.3.3
      with:
        name: wiki_result_chs_dict_${{ env.VERSION}}_${{github.event.inputs.dict_source}}_${{github.event.inputs.dict_tag}}
        path: |
          text/AA/filted.chs.txt
